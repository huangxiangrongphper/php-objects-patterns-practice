<?php
namespace popp\ch06\batch01;

require_once("src/ch06/batch01/paramreader.php");

/**
 *                    定义代码设计
 * 代码设计的一种意义涉及系统的定义：系统的要求、范围和目标。系统需要做什么？需要为谁这样做？
 * 系统的输出是什么？它们符合规定吗？在较低的层次上，设计的另一种意义指的是定义系统参与者
 * 并组织它们之间关系的过程。本章中讨论的设计就是第二种意义：类和对象的定义及特性。
 * 面向对象的系统由类组成。通常我们会通过继承关系使类拥有共通的接口，而这些接口或类型才是设计系统时应当首先考虑的。
 * 可以创建由其他类型组合而成的类或负责管理其他类型的实例类，甚至是可以简单地使用其他对象的类。
 * 对象间的这种组合关系或使用关系潜藏于我们的类中（例如，通过在方法签名中使用类型声明），但对象间的实际关系是在
 * 运行时建立的，我们可以利用这一点创造更加灵活的设计。
 *
 * 作为设计过程的一部分，我们必须决定一个功能在什么情况下应当属于某种类型，
 * 以及在什么情况下应当属于该类型所使用的另一个类。
 * 在设计过程中，我们面临许多抉择，这些抉择可能会使设计更清晰、更优雅、也可能会使设计深陷泥潭。
 *
 * 面向对象设计与传统的面向过程设计有何不同？你可能会认为最本质的区别是，面向对象的代码有对象。这既不对，也没用。
 * 在PHP中，我们经常会看到面向过程的代码也使用对象或者类中包含面向过程的代码。有对象并不意味着一定就是面向对象设计，
 * 即使是在Java等必须使用对象的编程语言中也一样。
 *
 * 面向对象代码和面向过程代码的根本区别在于职责的分配方式。面向过程代码采取的是一系列命令和方法调用的形式。
 * 控制代码往往负责不同条件的处理。这种自上而下的控制会导致项目中出现重复代码以及依赖关系。
 * 通过将处理任务的职责从客户端代码转移到系统中的对象，面向对象代码可以尽量减少这些依赖关系。
 *
 *
 *
 *
 *
 * Class Runner
 *
 * @package popp\ch06\batch01
 *
 */


class Runner
{
    public static function run()
    {
        $file = __DIR__."/params.txt";
        $params = [
            "key1" => "val1",
            "key2" => "val2",
            "key3" => "val3",
        ];
        writeParams($params, $file);
        $output = readParams($file);
        print_r($output);
    }
}
