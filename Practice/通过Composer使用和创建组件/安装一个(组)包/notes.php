<?php

/**
 * composer install
 * 执行完以后Composer会将包安装到vendor/目录中。
 *
 * 此外，它还会生成一个名为composer.lock的文件，
 * 该文件精确地记录了安装的所有软件包的版本号。
 *
 * 如果使用了版本控制工具，
 * 那么记得将这个文件提交到版本库中。
 *
 * 如果另一位开发人员也有这个composer.lock文件，
 * 那么当他运行composer install 命令时，
 * Composer会将指定版本的软件包安装到他的系统中。
 * 对于团队来说，
 * 这种方式能够确保所有开发人员所使用的软件包版本一致。
 * 对于单独的开发人员来说，这种方式可以确保生产环境与开发和测试环境的软件包版本相同。
 *
 * 当然，我们还可以运行以下命令来覆盖锁定文件。
 * composer update
 * 这条命令会生成一个新的锁定文件，
 * 如果通过通配符或范围指定版本，
 * 那么这条命令通常会将软件包升级到最新版本。
 *
 *
 * 通过命令行安装包
 * 如果我们需要的是一个单独的软件包，
 * 在命令行输入composer require命令时，
 * Composer会下载指定的软件包并将其安装到vendor/下。
 * 同时它还会生成一个composer.json文件，
 * 然后我们可以修改或添加文件内容。
 *
 * 版本
 * Composer支持语义化版本。
 * 在Composer中，软件包的版本号是以逗号分隔的三个数字定义的，
 * 即主版本号、次版本号和补丁号。
 * 如果只是修复了错误，没有添加任何功能，
 * 也不会破坏向后兼容性，
 * 那么就应该只增加补丁号；
 * 如果向程序添加了新的功能，
 * 但并不会破坏向后兼容性，
 * 那么就应该增加次版本号；
 * 如果新版本不向后兼容（换言之，客户端代码在调用新版本时会出错），
 * 那么就应该增加主版本号。
 * 如果感兴趣，可以在https://semver.org上了解更多关于语义化版本的内容。
 *
 * 在composer.json文件中指定版本时需要记住：
 * 通过范围或通配符指定版本时，
 * 范围过大可能破坏系统。
 *
 *                                  Composer中指定版本的几种方式
 * 版本指定类型         示例                      说明
 *  精确指定           1.2.2                只安装指定的版本
 * 通配符指定          1.2.*                安装指定的版本，但会找到匹配通配符的最新版本
 * 范围指定           1.0.0-1.1.7           安装指定的最低版本与指定的最高版本之间的版本
 * 比较指定           >1.2.0<=1.2.2         用<、<=、>和>=指定复杂的范围。可以通过空格（相当于"且"）或||(相当于"或")连接多个表达式
 * 波浪号指定（主版本）~1.3                  给定的版本号是最低版本，实际安装的版本号中的最后一个数字可以增加，前面的数字不能增加。
 *                                          例如，~1.3表示1.3是最低版本，但是版本不能等于或高于2.0.0
 * 插入符号指定       ^1.3                   安装的版本号必须比给定的版本号高，但不能等于或高于下一个主版本。例如，虽然~1.3.1无法匹配
 *                                           1.4或更高版本，但^1.3.1可以匹配1.3.1以上，2.0.0以下的版本。通常来说，这是最常用的版本指定
 *                                           方式
 *
 *
 *  require-dev元素
 * 开发过程中用到的一些软件包在生产环境中是不需要的。
 * 例如，我们会在本地使用PHPUnit运行测试，
 * 但生产环境中则不需要PHPUnit。
 *
 * 在Composer中，可以使用require-dev元素来解决这个问题，
 * 其使用方式与require元素相同。
 *
 * 但如果在生产环境中以--no-dev选项运行composer install，
 * Composer只会下载和安装require元素中指定的包。
 *
 * composer.lock文件，会记录有vendor/下安装的每个包的确切版本号。
 *
 * 如果运行composer install命令时同时存在composer.lock与composer.json文件，
 * 那么对于那些还没有安装的软件包，
 * Composer会安装在composer.lock文件中所记录的版本。
 *
 * 需要覆盖composer.lock文件时，
 * 无论是因为要获取最新版本的软件包，
 * 还是因为修改了composer.json文件，
 * 我们都应该运行composer update命令来覆盖该锁定文件。
 *
 *
 *
 *
 *
 */

