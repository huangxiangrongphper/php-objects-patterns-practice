<?php
/**
 *               四个说明代码需要检查的"方向标"。
 *  代码重复
 *      请认真检查系统中的重复代码。或许它们应该提取为共通代码。重复通常也意味着紧耦合。
 * 如果我们修改某个子程序中的一些代码，那么其他相似子程序中的代码是否也需要修改呢？这种情况表明它们可能属于同一个类。
 *
 * 类知道太多
 *     通过使用全局变量或让类知道其外部环境中的信息，可以将类与外部上下文捆绑在一起，使其依赖外部代码并难以复用。
 * 记住，我们希望解耦类和子程序，而不是让它们互相依赖。我们应当尽量让类只知道其内部的信息。
 *
 * 万能的类
 *     可能将某个类中的一个职责提取到基类中会更好。
 * 如果不改善这些万能的类，那么创建子类时就会特别麻烦。应当将哪个职责放到子类中呢？一个子类需要承担更多职责时，应该怎么做呢？你可能会创建过多
 * 子类，或过度依赖条件语句。
 *
 * 条件语句
 *      如果发现你在类中频繁地检查某个条件，特别是多个方法中都出现了这种检查时，这可能就是一个信号，
 * 表明我们应该将这个类分为两个或多个。我们应当看看能否用类表示这些条件代码。
 * 新的类应该实现同一个抽象基类，然后我们要将正确的类传递给客户端代码。
 *
 * the Unified Modeling Language。(统一建模语言)
 * 不仅可以通过类图建模类之间的结构，还可以通过序列图来建模系统中的对象间的交互。
 *
 *
 */
