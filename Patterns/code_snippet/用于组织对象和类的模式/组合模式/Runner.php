<?php

namespace popp\ch10\batch01;

/**
 * 使面向对象编程更加灵活的模式
 *
 * 组合（Composite）模式：将一组对象组合为可像单个对象一样使用的结构。
 *
 * 继承在组合模式中很重要，但其中部分重要性在于它为通过组合表现对象结构及扩展对象功能奠定了基础。
 *
 * 组合模式也许是将继承用于组合对象的最极端情况。
 *
 * 组合模式是一种聚合并管理各组相似对象的简单方式，可以让客户端像处理一组对象集合那样处理单个对象。
 *
 * 组合模式中类的继承树更易于生成对象并遍历树中的对象。
 *
 * 组合模式中的类结构与对象的组织结构非常相似。
 *
 * 继承层次是树形结构，父类是这棵树的根，树枝则是特化的子类。
 *
 * 本例处理组件的方式与处理集合的方式相同。组合模式能够帮助我们对集合和组件间的关系进行建模。
 *
 * 组合比继承更具灵活性
 *
 * 客户端代码并不需要区分一个对象究竟是Army、Unit还是TroopCarrier对象。
 * 它们在功能上都是相同，都需要移动、攻击和防守。
 * 这些对象需要提供用于添加和移除其他对象的方法。
 *
 * 我们可以通过这些相似性得出一个必然的结论：因为容器对象与其包含的对象具有相同的接口，
 * 所以它们本质上属于同一个类型家族。
 *
 * Class Runner
 *
 * @package popp\ch10\batch01
 */
class Runner
{
    public static function run()
    {
        $unit1 = new Archer();
        $unit2 = new LaserCannonUnit();
        $army = new Army();
        $army->addUnit($unit1);
        $army->addUnit($unit2);
        print $army->bombardStrength();
    }
}
